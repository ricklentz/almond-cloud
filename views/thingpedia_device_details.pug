extends layout

block scripts
  script(src=Config.ASSET_CDN + '/javascripts/device.js')

block styles
  link(rel='stylesheet', href=Config.ASSET_CDN + '/stylesheets/codemirror.css')
  link(rel='stylesheet', href=Config.ASSET_CDN + '/stylesheets/thingpedia-devices.css')
  link(rel='stylesheet', href=Config.ASSET_CDN + '/stylesheets/thingpedia-cheatsheet.css')

block page_name
  if device.category === 'online'
    = _("Account: %s").format(device.name)
  else if device.category === 'physical'
    = _("Device: %s").format(device.name)
  else
    = _("Service: %s").format(device.name)

block content
  if device.approved_version === null
    div.alert.alert-warning(role='alert')
      if user && (user.developer_status >= 3 || user.developer_status >=2 && user.developer_org === device.owner)
        form(action='/thingpedia/devices/approve', method='post').form-inline
          input(type='hidden',name='_csrf',value=csrfToken)
          input(type='hidden',name='kind',value=device.primary_kind)
          p.form-group= _("This device is not yet approved.")
            | &#x20;
            button(type='submit').btn.btn-success= _("Approve it")
      else if user && user.developer_org === device.owner
        p= _("This device is not yet approved for general use.")
          | &#x20;
          a(href='#request-approval-container',data-toggle='collapse',aria-expanded='false',aria-controls='request-approval-container').btn.btn-default= _("Request approval")
      else
        p= _("This device is not yet approved for general use. You need a developer key to use it.")
  else if device.approved_version !== device.developer_version && user && user.developer_status >= 3
    div.alert.alert-warning(role='alert')
      if user && user.developer_status >= 3
        form(action='/thingpedia/devices/approve', method='post').form-inline
          input(type='hidden',name='_csrf',value=csrfToken)
          input(type='hidden',name='kind',value=device.primary_kind)
          p.form-group= _("A newer version of this device was submitted.")
            | &#x20;
            button(type='submit').btn.btn-success= _("Approve it")

  div#request-approval-container.collapse
    div.panel.panel-default
      p.panel-heading= _("Request Approval")

      div.panel-body
        form(action='/thingpedia/devices/request-approval', method='post', data-toggle='validator')
          input(type='hidden',name='_csrf',value=csrfToken)
          input(type='hidden',name='kind',value=device.primary_kind)
        
          div.form-group
            label(for='request-approval-comments').control-label= _("Additional comments (optional)")
            textarea(name='comments').form-control#request-approval-comments

          div.form-group
            button(type='submit').btn.btn-primary= _("Send Request")

  if !device.translated
    div.alert.alert-info(role='alert')
      p
        if online
          = _("The translation for this account in your language is incomplete. ")
        else
          = _("The translation for this device in your language is incomplete. ")
        a(href='/thingpedia/translate/by-id/' + device.primary_kind).btn.btn-default= _("Contribute translation")

  if device.current_jobs['update-dataset'] && user && user.developer_org === device.owner
    div.alert.alert-info(role='alert')
      p
        = _("The natural language dataset for this device is being updated. You should wait before testing.")

  if device.current_jobs.train
    div.alert.alert-info(role='alert')
      p
        = _("The natural language model for this device is being updated. Natural language support might be limited.")
      if user && user.developer_org === device.owner
        p
          if device.current_jobs.train.status === 'queued'
             = _("Status: queued.")
          else if ['prepare', 'download_dataset', 'datagen'].indexOf(device.current_jobs.train.status) >= 0
             = _("Status: phase 1/3: preparing dataset.")
          else if ['training'].indexOf(device.current_jobs.train.status) >= 0
             = _("Status: phase 2/3: training machine learning model (%.0f%%).").format(device.current_jobs.train.progress*100)
          else if ['testing', 'uploading'].indexOf(device.current_jobs.train.status) >= 0
             = _("Status: phase 3/3: validating and uploading trained model.")
          else
             = _("Status: running.")
          |
          |
          if device.current_jobs.train.eta
            = _("ETA: %s").format((new Date(device.current_jobs.train.eta)).toLocaleString(locale, { timeZone: user ? user.timezone : undefined, year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', 'minute': 'numeric' }))
      

  aside#device-icon-large
    img(src=CDN_HOST + '/icons/' + device.primary_kind + '.png', alt="Icon for " + device.name)

  p#device-description= device.description

  if device.primary_kind === 'org.thingpedia.builtin.thingengine.builtin'
    p
      i= _("This is a builtin device in any Almond.")
  else if device.primary_kind === 'org.thingpedia.builtin.thingengine.remote' || device.primary_kind === 'org.thingpedia.builtin.thingengine'
    p
      i= _("This is an internally created, system device in any Almond.")
  else if device.primary_kind.startsWith('org.thingpedia.builtin.thingengine.')
    p
      i= _("This is a builtin device in certain versions of Almond. It may not be available in the Almond you are using.")

  if authenticated && user.developer_org !== null
    h2.device-subtitle#device-version= _("Class: ")
      a(href='/thingpedia/classes/by-id/' + device.primary_kind)= '@' + device.primary_kind
      if device.version !== device.approved_version && device.version !== device.developer_version
        if device.approved_version === null
          = _(", version none (approved), %d (developer); this version: %d").format(device.developer_version, device.version)
        else if device.approved_version !== device.developer_version
          = _(", version %d (approved), %d (developer); this version: %d").format(device.approved_version, device.developer_version, device.version)
        else
          = _(", version %d; this version: %d").format(device.approved_version, device.version)
      else
        if device.approved_version === null
          = _(", version none (approved), %d (developer)").format(device.developer_version)
        else if device.approved_version !== device.developer_version
          = _(", version %d (approved), %d (developer)").format(device.approved_version, device.developer_version)
        else
          = _(", version %d").format(device.approved_version)

  p#device-uploaded-by= _("Uploaded By: ")
    if user && user.roles & 0x1
      a(href='/admin/organizations/details/' + device.owner)=device.owner_name
    else
      a(href='/profiles/organization/' + device.owner_id_hash)= device.owner_name

  if classDef.extends !== null
    h2.device-subtitle= _("Extends: ")
      for k in classDef.extends
        = " "
        a(href='/thingpedia/classes/by-id/' + k)
          span.label.label-default= '@' + k

  div.clearfix

  if classDef.annotations.child_types && classDef.annotations.child_types.value.length > 0
    h2.device-subtitle= _("Configures:")
    p.help-block= _("Configuring this device will also configure one or more of the following")

    ul.device-child-types
      for k in classDef.annotations.child_types.toJS()
        li
          if k.indexOf('.') >= 0
            a(href='/thingpedia/devices/by-id/' + k)
              span= '@' + k
          else
            a(href='/thingpedia/classes/by-id/' + k)
              span= '@' + k

  h2.device-subtitle= _("Commands")
  if examples.length > 0
    ul.device-examples
      for e in examples
        li
          span(title=e.target_code)
            if e.type === 'stream'
              span.trigger= _("WHEN: ")
            else if e.type === 'query'
              span.query= _("GET: ")
            else if e.type === 'action'
              span.action= _("DO: ")

            for chunk in e.utterance_chunks
              if typeof chunk === 'string'
                 = chunk
              else
                 - let [match, param1, param2, opt] = chunk;
                 if match === '$$'
                   | $
                 else
                   | ____ #[small= '(' + clean(param1||param2) + ')']
  else
    //- this cannot really happen anymore, because we show commands of the child types too
    p#no-commands= _("This device has no commands of its own.")

  div.clearfix

  mixin invocation(inv, name, inv_type)
    li
      code.cm-s-default #[span.cm-variable= name](
        for argname, i in inv.args
          - let a = inv.getArgument(argname)
          if i !== 0
            br
            span.indent= ' '.repeat(name.length+1)
          span.cm-keyword
            if a.is_input
              = 'in '
              if a.required
                = 'req '
              else
                = 'opt '
            else
                = 'out '
          |  #[span.cm-variable= a.name] :
          span.cm-variable-3
            if a.type.isEntity
              a(href=`/thingpedia/entities/by-id/${a.type.type}`)= String(a.type)
            else if a.type.isArray && a.type.elem.isEntity
              | Array(#[a(href=`/thingpedia/entities/by-id/${a.type.elem.type}`)= String(a.type.elem)])
            else
              = String(a.type)
          if i !== inv.args.length-1
            = ', '
        = ')'
      | #{inv.annotations.doc ? inv.annotations.doc.toJS() : ''}
      br
      //-
        = _("Polling Interval: ")
        - let poll_interval = inv.annotations.poll_interval ? inv.annotations.poll_interval.toJS () : -1;
        span.poll_interval= poll_interval === 0 ? _("Push-based") : (poll_interval < 0 ? _("Non-deterministic") : _("%d ms").format(poll_interval))
        br
        if inv.is_list
          = _("This function returns a list of results.")
        else
          = _("This function returns a single result.")

  if Object.keys(classDef.queries).length > 0
    h2.device-subtitle= _("Queries")
    ul.device-channels
      for inv, name in classDef.queries
        +invocation(inv, name, 'query')

  if Object.keys(classDef.actions).length > 0
    h2.device-subtitle= _("Actions")
    ul.device-channels
      for inv, name in classDef.actions
        +invocation(inv, name, 'action')

  div.row#device-details-actions
    if authenticated && (user.developer_status >= 3 || device.owner === user.developer_org)
      div.col-md-3
        a.btn.btn-warning.btn-block(href='/thingpedia/upload/update/' + device.primary_kind)= _("Update")
      if user.developer_status >= 2 && device.approved_version !== null
        div.col-md-3
          form(action='/thingpedia/devices/unapprove', method='post').form-delete-device
            input(type='hidden',name='_csrf',value=csrfToken)
            input(type='hidden',name='kind',value=device.primary_kind)
            button(type='submit').btn.btn-danger.btn-block= _("Remove from collection")
      div.col-md-3
        form(action='/thingpedia/devices/delete', method='post').form-delete-device
          input(type='hidden',name='_csrf',value=csrfToken)
          input(type='hidden',name='kind',value=device.primary_kind)
          button(type='submit').btn.btn-danger.btn-block= _("Delete")
      if !device.current_jobs || !device.current_jobs.train
        div.col-md-3
          form(action='/thingpedia/devices/train', method='post').form-delete-device
            input(type='hidden',name='_csrf',value=csrfToken)
            input(type='hidden',name='kind',value=device.primary_kind)
            button(type='submit').btn.btn-primary.btn-block= _("Start Training")
    if device.download_url
      div.col-md-3
        a.btn.btn-default.btn-block(href=device.download_url)= _("Download code")
    if authenticated && user.locale !== 'en-US'
        div.col-md-2
          a.btn.btn-default.btn-block(href='/thingpedia/translate/by-id/' + device.primary_kind)= _("Translate")
